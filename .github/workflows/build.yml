name: Build and Test
on:
  pull_request:
    branches:
      - main

jobs:
  #---LINUX BUILD JOB(S)---
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    env:
      DEBIAN_FRONTEND: "noninteractive"
      oclus_build_type: "Release"
      oclus_conan_path: "$HOME/.local/bin"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu GCC",
            cc: "gcc", cxx: "g++",
          }

    steps:
      - name: Update environment
        shell: bash
        run: |
          # Update package lists
          apt update -qq
          # Install build tools
          apt install -y \
            clang \
            cmake \
            curl \
            lld \
            ninja-build \
            pkg-config \
            python3 \
            python3-pip \
            git \
            git-lfs \
            libgtk2.0-dev

          pip3 install wheel setuptools
          pip3 install conan mako

      #Checks out the repo
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Conan and pull packages
        shell: bash
        run : |
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile show default
          conan remote list

          cd library
          mkdir build
          cd build
          conan install ../conan --build=missing -s build_type=${{ env.oclus_build_type }}

      - name: Configure CMake
        shell: bash
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          export PATH="${{ env.oclus_conan_path }}":$PATH

          # Configure cmake
          cd library
          cd build
          echo "Current directory: $(pwd)"
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.oclus_build_type }} \
            -GNinja \
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: bash
        run: |
          cmake --build library/build

#      - name: Run tests
#        shell: bash
#        run: |
#          export LD_LIBRARY_PATH=$(pwd)/build/lib:$LD_LIBRARY_PATH
#          cd build
#          ctest --verbose -C ${{ env.oclus_build_type }}

#  #---WINDOWS BUILD JOB(S)---
#  windows:
#    name: ${{ matrix.config.name }}
#    runs-on: windows-latest
#    env:
#      oclus_build_type: "Release"
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#          - {
#            name: "Windows MSVC",
#            cc: "cl", cxx: "cl",
#            cmake_configure_options: '-G "Visual Studio 16 2019" -A x64',
#            conan_profile_update: 'conan profile update settings.compiler="Visual Studio" default; conan profile update settings.compiler.version=16 default'
#          }

#    steps:
#    
##      #Checks out the repo and LFS resources
##      - name: Checkout
##        uses: actions/checkout@v2
##        with:
##          lfs: 'true'
##
##      - name: Checkout LFS objects
##        shell: pwsh
##        run: git lfs checkout

#      #Checks out the repo and caches LFS resources
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          lfs: 'true'

#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

#      - name: Restore LFS cache
#        uses: actions/cache@v2
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

#      - name: Git LFS Pull
#        run: git lfs pull

#      - name: Update environment
#        shell: pwsh
#        run: |
#          pip3 install wheel setuptools
#          pip3 install conan

#      - name: Setup Conan and pull packages
#        shell: pwsh
#        run : |
#          conan profile new default --detect --force
#          conan profile update settings.compiler="Visual Studio" default
#          conan profile update settings.compiler.version=16 default
#          conan remote add machine-vision https://codexoculta.jfrog.io/artifactory/api/conan/machine-vision
#          conan profile show default
#          conan remote list

#          mkdir build
#          cd build
#          conan install ../conan -s build_type=${{ env.oclus_build_type }} -r machine-vision

#      - name: Configure CMake
#        shell: pwsh
#        run: |
#          $env:CC="${{ matrix.config.cc }}"
#          $env:CXX="${{ matrix.config.cxx }}"

#          # Configure CMake
#          cd build
#          cmake .. ${{ matrix.config.cmake_configure_options }}

#      - name: Build
#        shell: pwsh
#        run: |
#          cmake --build build --config ${{ env.oclus_build_type }}

#      - name: Run tests
#        shell: pwsh
#        run: |
#          cd build
#          ctest --verbose -C ${{ env.oclus_build_type }}

